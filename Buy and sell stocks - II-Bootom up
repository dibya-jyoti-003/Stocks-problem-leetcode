class Solution {
public:
    int solve(int ind,vector<int> &arr,bool buy,vector<vector<int>>& dp){
        int n = arr.size();
        if (ind == n)return 0;
        if (dp[ind][buy] != -1)return dp[ind][buy];
        int p1=0,p2=0;
        if (buy){
            p1 = solve(ind+1,arr,0,dp)-arr[ind];
            p2 = solve(ind+1,arr,1,dp);
        }
        else {
            p1 = solve(ind+1,arr,1,dp)+arr[ind];
            p2 = solve(ind+1,arr,0,dp);
        }
        return dp[ind][buy] = max(p1,p2);
    }
    int maxProfit(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n+1,vector<int> (2,-1));
        dp[n][0] = dp[n][1] =0;
        for (int i=n-1;i>=0;i--){
            dp[i][0] = max(dp[i+1][1]+arr[i],dp[i+1][0]);
            dp[i][1] = max(dp[i+1][0]-arr[i],dp[i+1][1]);
        }
        return dp[0][1];
    }
};
